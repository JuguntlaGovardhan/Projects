package com.abcbank.account.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.abcbank.account.entity.Account;
import com.abcbank.account.entity.AccountCreationStatus;
import com.abcbank.account.entity.Statement;
import com.abcbank.account.entity.TransactionRequest;
import com.abcbank.account.entity.TransactionStatus;
import com.abcbank.account.serviceImpl.AccountServiceImpl;
import com.google.common.base.Optional;

@RestController
@RequestMapping("/accounts")
public class AccountController {
	
	@Autowired
	private AccountServiceImpl service;
	
	@PostMapping("/createAccount/{customerId}")
	public AccountCreationStatus createAccount(@PathVariable ("customerId") Long id) {
		return service.createAccount(id);
	}
	
	@GetMapping("/getCustomerAccounts/{customerId}")
	public List<Account> getCustomerAccountsById(@PathVariable("customerId") Long id){
		return service.getCustomerAccounts(id);
	}
	
	@GetMapping("/getAccount/{accountId}")
	public Optional<Account> getAccountDetails(@PathVariable("accountId") Long id){
		return service.getAccountDetails(id);
	}
	
	@GetMapping("/getAccountStatement/{accountId}/{fromDate}/{toDate}")
	public List<Statement> getStatements(@PathVariable("accountId") Long accountId,@PathVariable("fromDate") LocalDate fromDate,@PathVariable("toDate") LocalDate toDate){
		return service.getStatements(accountId, fromDate, toDate);
	}
	
	@PostMapping("/deposit")
	public TransactionStatus deposit(@RequestBody TransactionRequest depositRequest) {
		return service.depositAmount(depositRequest);
	}
	
	@PostMapping("/withdraw")
	public TransactionStatus withDraw(@RequestBody TransactionRequest withdrawRequest) {
		return service.withDrawlAmount(withdrawRequest);
	}
}
